name: CD

on: workflow_dispatch

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.retrieve-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check CHANGELOG.md file exists
        run: "[ -f CHANGELOG.md ]"
      - name: Check unreleased version is defined in CHANGELOG.md
        run: grep '^\#\# \[Unreleased\] - yyyy-mm-dd$' CHANGELOG.md
      - name: Check and retrieve version
        id: retrieve-version
        run: bash .github/workflows/scripts/get_version.sh

  test-ubuntu:
    runs-on: ubuntu-22.04
    needs: check-version
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve minimal supported rust version
        id: rust_version
        run: bash .github/workflows/scripts/find_minimal_rust_version.sh
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
      - name: Install graphics dependencies
        run: bash .github/workflows/scripts/install_graphic_dependencies_linux.sh
      - name: Build
        run: cargo build --all-targets
      - name: Test
        run: cargo test

  test-windows:
    runs-on: windows-2022
    needs: check-version
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve minimal supported rust version
        id: rust_version
        run: bash .github/workflows/scripts/find_minimal_rust_version.sh
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
      - name: Build
        run: cargo build --all-targets
      - name: Test
        run: cargo test

  test-macos:
    runs-on: macos-11
    needs: check-version
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve minimal supported rust version
        id: rust_version
        run: bash .github/workflows/scripts/find_minimal_rust_version.sh
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
      - name: Build
        run: cargo build --all-targets
      # Tests are disabled because there is no available software renderer

  test-web:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve minimal supported rust version
        id: rust_version
        run: bash .github/workflows/scripts/find_minimal_rust_version.sh
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
          target: wasm32-unknown-unknown
          components: clippy
      - name: Install wasm-pack
        run: cargo install wasm-pack --debug
      - name: Test
        run: for crate_path in crates/*; do wasm-pack test --node "$crate_path"; done

  publish:
    environment: Deployment
    runs-on: ubuntu-22.04
    needs:
      - test-ubuntu
      - test-windows
      - test-macos
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve minimal supported rust version
        id: rust_version
        run: bash .github/workflows/scripts/find_minimal_rust_version.sh
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
      - name: Publish
        run: bash .github/workflows/scripts/publish.sh
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  create-release:
    environment: Deployment
    runs-on: ubuntu-22.04
    needs:
      - publish
    steps:
      - name: Install dependencies
        run: sudo apt-get install node-semver -y
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_TOKEN }}
      - name: Apply version and date in CHANGELOG.md file
        run: sed -i "s/^\#\# \[Unreleased\] - yyyy-mm-dd$/\#\# [${{needs.check-version.outputs.version}}] - $(date +'%Y-%m-%d')/g" CHANGELOG.md
      - name: Push changes and create tag
        uses: EndBug/add-and-commit@v7
        with:
          default_author: github_actions
          message: Release v${{needs.check-version.outputs.version}}
          tag: -a v${{needs.check-version.outputs.version}} -m 'Release v${{needs.check-version.outputs.version}}'
      - name: Add section for next version in CHANGELOG.md
        run: sed -i '/\#\# \[${{needs.check-version.outputs.version}}\]/i \#\# [Unreleased] - yyyy-mm-dd\n' CHANGELOG.md
      - name: Increment version in Cargo.toml
        run: bash .github/workflows/scripts/increment_version.sh ${{needs.check-version.outputs.version}}
      - name: Push changes
        uses: EndBug/add-and-commit@v7
        with:
          default_author: github_actions
          message: Prepare next release
      - name: Extract changelog
        run: sed -n '/\#\# \[${{needs.check-version.outputs.version}}/,/\#\# \[/p' CHANGELOG.md | sed '/\#\# \[/d' | sed '1{/^$/d}' | sed '1{/^$/d}' | sed '${/^$/d}' | sed '${/^$/d}' > version_changelog.md
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{needs.check-version.outputs.version}}
          release_name: v${{needs.check-version.outputs.version}}
          body_path: version_changelog.md
