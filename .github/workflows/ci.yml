name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: 0 2 * * SAT

env:
  XDG_RUNTIME_DIR: "~"
  CARGO_TERM_COLOR: always
  COV_THRESHOLD: 100.0
  CODECOV_UPLOAD: true

jobs:
  test-ubuntu:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve minimal supported rust version
        id: rust_version
        run: bash .github/workflows/scripts/find_minimal_rust_version.sh
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Install general dependencies
        run: sudo apt-get update && sudo apt-get install libudev-dev
      - name: Install graphics dependencies
        run: bash .github/workflows/scripts/install_graphic_dependencies_linux.sh
      - name: Build
        run: cargo build --all-targets
      - name: Test
        run: cargo test
        env:
          WGPU_BACKEND: vulkan

  test-windows:
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve minimal supported rust version
        id: rust_version
        run: bash .github/workflows/scripts/find_minimal_rust_version.sh
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Build
        run: cargo build --all-targets
      - name: Test
        run: cargo test

  test-macos:
    runs-on: macos-11
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve minimal supported rust version
        id: rust_version
        run: bash .github/workflows/scripts/find_minimal_rust_version.sh
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Build
        run: cargo build --all-targets
      # Tests are disabled because there is no available software renderer

  test-android:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve minimal supported rust version
        id: rust_version
        run: bash .github/workflows/scripts/find_minimal_rust_version.sh
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
          target: aarch64-linux-android
          components: clippy
      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: List clippy lints
        run: echo "LINTS=$(cat .lints | cut -f1 -d"#" | tr '\n' ' ')" >> $GITHUB_OUTPUT
        id: list_lints
      - name: Run clippy
        run: cargo clippy --all-targets --target aarch64-linux-android -- -D warnings ${{ steps.list_lints.outputs.LINTS }}

  test-web:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve minimal supported rust version
        id: rust_version
        run: bash .github/workflows/scripts/find_minimal_rust_version.sh
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
          target: wasm32-unknown-unknown
          components: clippy
      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Install wasm-pack
        run: cargo install wasm-pack --debug
      - name: Build
        run: cargo build --all-targets --target wasm32-unknown-unknown
      - name: Test
        run: for crate_path in crates/*; do wasm-pack test --node "$crate_path"; done
      - name: List clippy lints
        run: echo "LINTS=$(cat .lints | cut -f1 -d"#" | tr '\n' ' ')" >> $GITHUB_OUTPUT
        id: list_lints
      - name: Run clippy
        run: cargo clippy --all-targets --target wasm32-unknown-unknown -- -D warnings ${{ steps.list_lints.outputs.LINTS }}

  check-coverage:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Retrieve minimal supported rust version
        id: rust_version
        run: bash .github/workflows/scripts/find_minimal_rust_version.sh
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
          components: llvm-tools-preview
      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Install general dependencies
        run: sudo apt-get update && sudo apt-get install libudev-dev
      - name: Install graphics dependencies
        run: bash .github/workflows/scripts/install_graphic_dependencies_linux.sh
      - name: Install grcov
        run: cargo install grcov --debug
      - name: Run unit tests
        run: cargo test --lib --tests
        env:
          RUSTFLAGS: -Cinstrument-coverage -Clink-dead-code
          LLVM_PROFILE_FILE: "%m.profraw"
          WGPU_BACKEND: vulkan
      - name: Generate HTML coverage report
        if: ${{ env.CODECOV_UPLOAD != 'true' }}
        run: bash .github/workflows/scripts/generate_coverage.sh html ./coverage/
      - name: Upload coverage report on GitHub
        if: ${{ env.CODECOV_UPLOAD != 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage
          if-no-files-found: error
          retention-days: 7
      - name: Check coverage threshold
        if: ${{ env.CODECOV_UPLOAD != 'true' }}
        run: bash .github/workflows/scripts/check_coverage_html.sh
      - name: Generate LCOV coverage report
        if: ${{ env.CODECOV_UPLOAD == 'true' }}
        run: bash .github/workflows/scripts/generate_coverage.sh lcov ./lcov.info
      - name: Upload coverage report on Codecov
        if: ${{ env.CODECOV_UPLOAD == 'true' }}
        uses: codecov/codecov-action@v3
        with:
          files: ./lcov.info
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Check coverage threshold
        if: ${{ env.CODECOV_UPLOAD == 'true' }}
        run: bash .github/workflows/scripts/check_coverage_lcov.sh

  generate-doc:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve minimal supported rust version
        id: rust_version
        run: bash .github/workflows/scripts/find_minimal_rust_version.sh
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Install general dependencies
        run: sudo apt-get update && sudo apt-get install libudev-dev
      - name: Generate documentation
        run: cargo doc
        env:
          RUSTDOCFLAGS: -Dwarnings

  lint-rust:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve minimal supported rust version
        id: rust_version
        run: bash .github/workflows/scripts/find_minimal_rust_version.sh
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
          components: rustfmt, clippy
      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Install general dependencies
        run: sudo apt-get update && sudo apt-get install libudev-dev
      - name: List clippy lints
        run: echo "LINTS=$(cat .lints | cut -f1 -d"#" | tr '\n' ' ')" >> $GITHUB_OUTPUT
        id: list_lints
      - name: Run clippy
        run: cargo clippy --all-targets -- -D warnings ${{ steps.list_lints.outputs.LINTS }}
      - name: Run rustfmt
        run: cargo fmt -- --check
      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          rust-version: ${{ steps.rust_version.outputs.RUST_VERSION_STABLE }}
      - name: Check crates are registered on crates.io
        run: bash .github/workflows/scripts/check_registered_crates.sh
        env:
          CARGO_TERM_COLOR: never

  lint-generic:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install other dependencies
        run: sudo apt-get install moreutils dos2unix
      - name: Check encoding
        run: isutf8 **/*
      - name: Check line endings
        run: bash .github/workflows/scripts/check_line_endings.sh
      - name: Check TODOs
        run: bash .github/workflows/scripts/check_todos.sh
      - name: Check published crate list
        run: bash .github/workflows/scripts/check_published_crate_list.sh
